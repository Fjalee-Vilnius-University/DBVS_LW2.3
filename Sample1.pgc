#include <stdio.h>
#include <sqlca.h>
#include <stdbool.h>
#include <ctype.h>

void AddKlientas();
bool ShowAllKlientas();
void DeleteKlientas();
void UpdateKlientas();
bool ConnectToDB();
int MainMenu();
int KlientasMenu();
void ShowSiuvejaTasks();
bool SearchSiuveja();
bool IsLettersOnly();
bool DnContainSemiColon(const char s[]);

int main()
{
  bool connected = ConnectToDB();

  while (1){
    if (connected){
      int mainMenu = MainMenu();

      if (0 == mainMenu){
        EXEC SQL DISCONNECT;
        return 0;
      }

      if (1 == mainMenu){
        int klientasMenu = KlientasMenu();

        if(1 == klientasMenu) AddKlientas();
        if(2 == klientasMenu) UpdateKlientas();
        if(3 == klientasMenu) DeleteKlientas();
      }

      if (2 == mainMenu){
        ShowSiuvejaTasks();
      }

      if (3 == mainMenu){
        char word[21];
        scanf("%s", word);
        printf("%d", DnContainSemiColon(word));
      }
    }
  }
}

int KlientasMenu(){
  printf("Pasirinkite veiksma:\n");
  printf("1 - Prideti Klienta: \n");
  printf("2 - Keisti Kliento duomenis: \n");
  printf("3 - Istrinti Klienta: \n");

  int choice;
  scanf("%d", &choice);
  return choice;
}

int MainMenu(){
  printf("\nPasirinkite veiksma:\n");
  printf("0 - Iseiti: \n");
  printf("1 - Klientas: \n");
  printf("2 - Patikrinti Siuvejos darbus: \n");
  
  int choice;
  scanf("%d", &choice);
  return choice;
}

bool ConnectToDB(){
  EXEC SQL CONNECT TO studentu@pgsql3.mif USER ryce6320 USING Ce123456;
  if(0 == SQLCODE){
    printf("\nSekmingai prisijungta prie Siuvyklos duombazes.\n");
    return true;
  }
  else{
    printf("\nNepavyko prisijungti prie Siuvyklos duombazes.\n");
    return false;
  }
}

void AddKlientas(){
  EXEC SQL BEGIN DECLARE SECTION;
    char vardas[21];
    char pavarde[21];
    char tel_nr[13];
    char el_pastas[41];
  EXEC SQL END DECLARE SECTION;

  printf("Iveskite naujo kliento varda: \n");
  scanf("%s", vardas);
  printf("Iveskite naujo kliento pavarde: \n");
  scanf("%s", pavarde);
  printf("Iveskite naujo kliento telefono numeri: \n");
  scanf("%s", tel_nr);
  printf("Iveskite naujo kliento elektronini pasta: \n");
  scanf("%s", el_pastas);

  if (IsLettersOnly(vardas) && IsLettersOnly(pavarde) && DnContainSemiColon(tel_nr) && DnContainSemiColon(el_pastas)){
    EXEC SQL INSERT INTO ryce6320.Klientas
    (Vardas, Pavarde, Tel_nr, El_pastas) VALUES
    (:vardas, :pavarde, :tel_nr, :el_pastas);

    if(0 == SQLCODE){
      EXEC SQL COMMIT; 
      printf("Klientas pridetas\n");
    }
    else {
      EXEC SQL ROLLBACK;
      printf("Kliento prideti nepavyko\n");
    }
  }

  else printf("Kliento prideti nepavyko\n");
}

bool ShowAllKlientas(){
  EXEC SQL BEGIN DECLARE SECTION;
    int nr;
    char vardas[21];
    char pavarde[21];
    char tel_nr[13];
    char el_pastas[41];
  EXEC SQL END DECLARE SECTION;

  EXEC SQL DECLARE curs CURSOR FOR
  SELECT * FROM Klientas;

  printf("Klientu sarasas:\n");
  EXEC SQL OPEN curs;
  while(1){
    EXEC SQL FETCH curs INTO :nr, :vardas, :pavarde, :tel_nr, :el_pastas;
    if (SQLCODE < 0) goto error;
    if (SQLCODE == 100) goto menu;

    printf("%d. %s %s %s\n", nr, vardas, pavarde, tel_nr);
  }
  EXEC SQL CLOSE curs;

  menu: return true;
  error: return false;
}

void DeleteKlientas(){
  bool letDel = ShowAllKlientas();

  if (letDel){
    EXEC SQL BEGIN DECLARE SECTION;
    int nr;
    EXEC SQL END DECLARE SECTION;

    printf("Iveskite trinamo kliento Nr:\n");
    scanf("%d", &nr);

    EXEC SQL DELETE FROM ryce6320.Klientas WHERE Nr = :nr ;

    if(0 == SQLCODE){
      EXEC SQL COMMIT; 
      printf("Klientas istrintas sekmingai\n");
    }
    else {
      EXEC SQL ROLLBACK;
      printf("Kliento istrinti nepavyko\n");
    }
  }
  else printf("Nepavyko pateikti Klientu saraso\n");
}

void UpdateKlientas(){
  bool letDel = ShowAllKlientas();

  if (letDel){
    EXEC SQL BEGIN DECLARE SECTION;
    int nr;
    char vardas[21];
    char pavarde[21];
    char tel_nr[13];
    char el_pastas[41];
    EXEC SQL END DECLARE SECTION;

    printf("Iveskite keiciamo kliento Nr: \n");
    scanf("%d", &nr);
    printf("Iveskite nauja varda: \n");
    scanf("%s", &vardas);
    printf("Iveskite nauja pavarde: \n");
    scanf("%s", &pavarde);
    printf("Iveskite nauja tel. nr: \n");
    scanf("%s", &tel_nr);
    printf("Iveskite nauja el. pasta: \n");
    scanf("%s", &el_pastas);

    EXEC SQL UPDATE ryce6320.Klientas
    SET Vardas = :vardas, Pavarde = :pavarde, Tel_nr = :tel_nr, El_pastas = :el_pastas
    WHERE Nr = :nr;

    if(0 == SQLCODE){
      EXEC SQL COMMIT; 
      printf("Klientas atnaujintas sekmingai\n");
    }
    else {
      EXEC SQL ROLLBACK;
      printf("Kliento atnaujinti nepavyko\n");
    }
  }
  else printf("Nepavyko pateikti Klientu saraso");
}

void ShowSiuvejaTasks(){
  if (SearchSiuveja()){
    EXEC SQL BEGIN DECLARE SECTION;
    int nr;
    int klientNr;
    char klientVard[21];
    char klientPav[21];
    double kaina;
    char atlData[11];
    EXEC SQL END DECLARE SECTION;

    printf("Pasirinkite Nr norimos Siuvejos\n");
    scanf("%d", &nr);

    EXEC SQL DECLARE curs3 CURSOR FOR 
    SELECT U.Klientas, K.Vardas, K.Pavarde, U.Kaina, U.Atlikti
    FROM ryce6320.Uzsakymas AS U, ryce6320.Siuveja AS S, ryce6320.Siuva AS Siuv, ryce6320.Klientas AS K
    WHERE S.Nr = :nr AND S.Nr = Siuv.Siuveja AND Siuv.Uzsakymas = U.Nr AND K.Nr = U.Klientas;

    EXEC SQL OPEN curs3;
    while(100 != SQLCODE){
      EXEC SQL FETCH curs3 INTO :klientNr, :klientVard, :klientPav, :kaina, :atlData;
      
      if (0 == SQLCODE)
        printf("%d. %s %s. Uzsakymas atlikti iki %s. Kaina %lf\n", klientNr, klientVard, klientPav, atlData, kaina);
    }
    EXEC SQL CLOSE curs3;
  }
}

bool SearchSiuveja(){
  EXEC SQL BEGIN DECLARE SECTION;
  char search[21];
  int nr;
  char vardas[21];
  char pavarde[21];
  char tel_nr[13];
  char el_pastas[41];
  EXEC SQL END DECLARE SECTION;
  printf("Iveskite ieskomos Siuvejos varda: \n");
  scanf("%s", &search);

  if (IsLettersOnly(search)){
    EXEC SQL DECLARE curs2 CURSOR FOR
    SELECT Nr, Vardas, Pavarde, Tel_nr FROM ryce6320.Siuveja WHERE LOWER(Vardas) LIKE '%' || LOWER(:search) || '%';
    if (100 == SQLCODE) printf("Rezultatu nerasta\n");
    if (0 == SQLCODE){
      EXEC SQL OPEN curs2;
      while(1){
        EXEC SQL FETCH curs2 INTO :nr, :vardas, :pavarde, :tel_nr;
        
        if (SQLCODE < 0) goto error2;
        if (SQLCODE == 100) break;
        else printf("%d. %s %s %s\n", nr, vardas, pavarde);
      }
      EXEC SQL CLOSE curs2;
    }
    else goto error2;
  }
  else goto error2;
  return 1;
  error2: 
    printf("Paieskos ivykdyti nepavyko\n");
    return 0;
}

bool IsLettersOnly(const char s[]){
  unsigned char c;
  while ((c = *s) && (isalpha(c) || isblank(c))) ++s;
  return *s == '\0'; 
}

bool DnContainSemiColon(const char s[]){
  unsigned char c;
  while ((c = *s) && ((c != ';'))) ++s;
  return *s == '\0'; 
}